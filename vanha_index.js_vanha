// tehtävä 13.3
require('dotenv').config()
const { Sequelize, Model, DataTypes } = require('sequelize')
const express = require('express')
const app = express()
app.use(express.json())

const sequelize = new Sequelize(process.env.DATABASE_URL, {
  dialectOptions: {
    ssl: {
      require: true,
      rejectUnauthorized: false
    }
  },
})

class Blog extends Model {}
Blog.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  author: {
    type: DataTypes.TEXT
  },
  url: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  title: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  likes: {
    type: DataTypes.INTEGER,
    defaultValue: 0
  }
}, {
  sequelize,
  underscored: true,
  timestamps: false,
  modelName: 'blog'
})

// tehtävä 13.4
app.get('/api/blogs', async (req, res) => {
  const blogs = await Blog.findAll()
  console.log('kaikki blogsit:', blogs);
  console.log('kaikki blogsit kauniimmin:', blogs.map(b=>b.toJSON()));
  console.log('kaikki blogsit stringifyöitynä:', JSON.stringify(blogs));
  console.log('kaikki blogsit stringifyöitynä kauniimmin:', JSON.stringify(blogs, null, 2));
  res.json(blogs)
})

app.post('/api/blogs', async (req, res) => {
  console.log('POST req',req.body)
  try {
    const blog = await Blog.create(req.body)
    return res.json(blog)
  } catch(error) {
    return res.status(400).json({ error })
  }
})

app.delete('/api/blogs/:id', async (req, res) => {
  const id = req.params.id
  console.log('poisto', id);
  try {
    await Blog.destroy({
      where: {
        id: id
      }
    });
    res.send(204)
  } catch(error) {
    return res.status(400).json({ error })
  }
})

/* const main = async () => {
  try {
    await sequelize.authenticate()
    const blogs = await Blog.findAll()
    //console.log(blogs)
    blogs.forEach(b => console.log(b.author + ': ' + '\'' + b.title + '\', ' + b.likes + ' likes.'))
    sequelize.close()
  } catch (error) {
    console.error('Unable to connect to the database:', error)
  }
}

main() */

const PORT = process.env.PORT || 3001
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}!`)
})